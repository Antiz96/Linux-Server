---
# tasks file for append_group_user

- name: "Fail if the 'username' variable is empty or undefined"
  ansible.builtin.fail:
    msg: "The 'username' variable is empty"
  when: username is undefined or username | length == 0

- name: "Add sudo privileges"
  when: sudo | default(false) | bool
  block:

    - name: "Add sudo privileges - Debian"
      ansible.builtin.user:
        name: "{{ username }}"
        groups: sudo
      when: ansible_facts['distribution'] == "Debian"

    - name: "Add sudo privileges - Arch & Alpine"
      ansible.builtin.user:
        name: "{{ username }}"
        groups: wheel
      when: ansible_facts['distribution'] == "Archlinux" or ansible_facts['distribution'] == "Alpine"

- name: "Remove sudo privileges & append group"
  when: not sudo | default(false) | bool
  block:

    - name: "Remove sudo privileges - Debian"
      ansible.builtin.shell:
        cmd: gpasswd -d "{{ username }}" sudo
      register: remove_sudo_debian
      failed_when: remove_sudo_debian.rc != 0 and remove_sudo_debian.rc != 3 # return code 3 means the user isn't a member of the group already
      changed_when: remove_sudo_debian.rc == 0
      when: ansible_facts['distribution'] == "Debian"

    - name: "Remove sudo privileges - Arch & Alpine"
      ansible.builtin.shell:
        cmd: gpasswd -d "{{ username }}" wheel
      register: remove_sudo_arch_alpine
      failed_when: remove_sudo_arch_alpine.rc != 0 and remove_sudo_arch_alpine.rc != 3 # return code 3 means the user isn't a member of the group already
      changed_when: remove_sudo_arch_alpine.rc == 0
      when: ansible_facts['distribution'] == "Archlinux" or ansible_facts['distribution'] == "Alpine"

    - name: "Append group"
      ansible.builtin.user:
        name: "{{ username }}"
        groups: "{{ group }}"
        append: true

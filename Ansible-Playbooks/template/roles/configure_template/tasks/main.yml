---
# tasks file for template

# Stop the playbook if the "ip" var is empty
- name: Check the "ip" variable
  fail:
    msg: The 'ip' variable is empty
  when: not ip

# Stop the playbook if the "hostname" var is empty
- name: Check the "hostname" variable
  fail:
    msg: The 'hostname' variable is empty
  when: not hostname

# Stop the playbook if the "root_passwd" var is empty
- name: Check the "root_passwd" variable
  fail:
    msg: The 'root_passwd' variable is empty
  when: not root_passwd

# If the server is a Debian Server, change the IP by modifying the "interfaces" file
- name: Modify IP - Debian
  replace:
    path: /etc/network/interfaces
    regexp: "192.168.1.100"
    replace: "{{ip}}"
  when: ansible_facts['distribution'] == "Debian"

# If the server is an Arch Server, change the IP by modifying the "nmconnection" file
- name: Modify IP - Arch
  replace:
    path: /etc/NetworkManager/system-connections/Connexion filaire 1.nmconnection
    regexp: "192.168.1.100"
    replace: "{{ip}}"
  when: ansible_facts['distribution'] == "Archlinux"

# Change the hostname of the server
- name: Modify hostname
  hostname:
    name: "{{hostname}}.rc"
  
# Change the "hosts" file of the server accordingly
- name: Modify "hosts" file
  lineinfile:
    path: /etc/hosts
    regexp: "^127.0.1.1"
    line: "127.0.1.1       {{hostname}}.rc {{hostname}}"

# Change the root password
- name : Modify root password
  user:
    name: root
    password: "{{root_passwd|password_hash('sha256')}}"
    update_password: always

# If the server is a Debian Server, update it via "apt" (apt update && apt full-upgrade && apt autoremove)
- name: Update - Debian
  apt:
    update_cache: yes
    upgrade: full
    autoremove: yes
  when: ansible_facts['distribution'] == "Debian"

# If the server is an Arch Server, check that the "archlinux-keyring" package is up to date (and udpate it if needed)

- name: Check archlinux-keyring - Arch
  pacman:
    name: archlinux-keyring
    update_cache: yes
    state: latest
  when: ansible_facts['distribution'] == "Archlinux"

# If the server is an Arch Server, update it via "pacman" (pacman -Sy && pacman -Su)
- name: Update - Arch
  pacman:
    update_cache: yes
    upgrade: yes
  when: ansible_facts['distribution'] == "Archlinux"

# Tell the user the configuration is over and that he needs to reboot the machine to finish
- name: Configuration done
  shell:
    cmd: echo "The configuration is over ! Reboot, the machine to apply changes for {{hostname}} ({{ip}})"
  register: configuration_done

- name: Configuration done out
  debug:
    msg: "{{configuration_done.stdout_lines}}"

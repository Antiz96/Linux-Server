---
# tasks file for update_server

# If the server is a Debian Server, update the repositories with "apt" (apt update)
- name : Update repos - Debian
  apt:
    update_cache: yes
  when: ansible_facts['distribution'] == "Debian"

# If the server is an Arch Server, update the repositories with "pacman" (pacman -Sy)
- name : Update repos - Arch
  pacman:
    update_cache: yes
  when: ansible_facts['distribution'] == "Archlinux"

# If the server is a Debian Server, print the list of package(s) marked for update via "apt" (apt list --upgradable)
- name: List packages - Debian
  shell:
    cmd: apt list --upgradable
  register: apt_packages
  when: ansible_facts['distribution'] == "Debian"

- name: List packages - Debian out
  debug:
    msg: "{{apt_packages.stdout_lines}}"
  when: ansible_facts['distribution'] == "Debian"

# If the server is an Arch Server, print the list of package(s) marked for update via "pacman-contrib" (checkupdates)
- name: List packages - Arch
  shell:
    cmd: checkupdates
  register: pacman_packages
  ignore_errors: yes
  when: ansible_facts['distribution'] == "Archlinux"

- name: List packages - Arch out
  debug:
    msg: "{{pacman_packages.stdout_lines}}"
  when: ansible_facts['distribution'] == "Archlinux"

# If the server is a Debian Server, update it via "apt" (apt full-upgrade && apt autoremove)
- name: Update - Debian
  apt:
    upgrade: full
    autoremove: yes
  when: ansible_facts['distribution'] == "Debian"

# If the server is an Arch Server, check that the "archlinux-keyring" package is up to date (and udpate it if needed)

- name: Check archlinux-keyring - Arch
  pacman:
    name: archlinux-keyring
    state: latest
  when: ansible_facts['distribution'] == "Archlinux"

# If the server is an Arch Server, update it via "pacman" (pacman -Su)
- name: Update - Arch
  pacman:
    upgrade: yes
  when: ansible_facts['distribution'] == "Archlinux"

# Reboot to apply changes on the LAN (the "net" variable is defined in the inventory file)
- name: Reboot - LAN
  reboot:
    test_command: whoami 
  when: net == "LAN" 

# Reboot to apply changes on the DMZ (the "net" variable is defined in the inventory file)
- name: Reboot - DMZ
  reboot:
    test_command: whoami 
  when: net == "DMZ" 

# Reboot to apply changes on the SERVICE (the "net" variable is defined in the inventory file), except for the ansible server itself that will have to be rebooted manually
- name: Reboot - SERVICE
  reboot:
    test_command: whoami 
  when: net == "SERVICE" and ansible_facts['hostname'] != "amprd01"

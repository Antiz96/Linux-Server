---
# tasks file for append_group_user

# Stop the playbook if the "username" var is empty or undefined
- name: Fail if the "username" variable is empty or undefined
  ansible.builtin.fail:
    msg: The 'username' variable is empty
  when: not username

# If the "sudo" var is set to "true", add sudo privileges on Debian servers
- name: Add sudo privileges - Debian
  ansible.builtin.user:
    name: "{{ username }}"
    groups: sudo
  when: ansible_facts['distribution'] == "Debian" and sudo | bool

# If the "sudo" var is set to "true", add sudo privileges on Arch servers
- name: Add sudo privileges - Arch
  ansible.builtin.user:
    name: "{{ username }}"
    groups: wheel
  when: ansible_facts['distribution'] == "Archlinux" and sudo | bool

# If the "sudo" var is set to "false", remove sudo privileges on Debian servers
- name: Remove sudo privileges - Debian
  ansible.builtin.shell: 
    cmd: gpasswd -d "{{ username }}" sudo
  register: remove_sudo_debian
  failed_when: remove_sudo_debian.rc != 0 and remove_sudo_debian.rc != 3 #return code 3 means the user isn't a member of the specified group
  changed_when: remove_sudo_debian.rc == 0
  when: ansible_facts['distribution'] == "Debian" and not sudo | bool

# If the "sudo" var is set to "false", remove sudo privileges on Arch servers
- name: Remove sudo privileges - Arch
  ansible.builtin.shell: 
    cmd: gpasswd -d "{{ username }}" wheel
  register: remove_sudo_arch
  failed_when: remove_sudo_arch.rc != 0 and remove_sudo_arch.rc != 3 #return code 3 means the user isn't a member of the specified group
  changed_when: remove_sudo_arch.rc == 0
  when: ansible_facts['distribution'] == "Archlinux" and not sudo | bool

# If the "sudo" var is set to "false" and the "group" var is not empty, append the group(s) contained in the group var to the user
- name: Append group
  ansible.builtin.user:
    name: "{{ username }}"
    groups: "{{ group }}"
    append: true
  when: not sudo | bool and group

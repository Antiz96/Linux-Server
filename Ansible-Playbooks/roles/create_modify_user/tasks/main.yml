---
# tasks file for create_modify_user

# Stop the playbook if the "username" var is empty or undefined
- name: Fail if the "username" variable is empty or undefined
  ansible.builtin.fail:
    msg: The 'username' variable is empty
  when: not username

# Stop the playbook if the "user_passwd" var is empty or undefined
- name: Fail if the "user_passwd" variable is empty or undefined
  ansible.builtin.fail:
    msg: The 'user_passwd' variable is empty
  when: not user_passwd

# Stop the playbook if the "pubkey" var is empty or undefined
- name: Fail if the "pubkey" variable is empty or undefined
  ansible.builtin.fail:
    msg: The 'pubkey' variable is empty
  when: not pubkey

# Create the user (if it does not exists already) as well as its /home and set/modify its password
- name: Create user
  ansible.builtin.user:
    name: "{{ username }}"
    state: present
    shell: /bin/bash
    create_home: true
    password: "{{ user_passwd | password_hash('sha256') }}"
    update_password: always

# If the "sudo" var is set to "true", add sudo privileges on Debian servers
- name: Add sudo privileges - Debian
  ansible.builtin.user:
    name: "{{ username }}"
    groups: sudo
  when: ansible_facts['distribution'] == "Debian" and sudo | bool

# If the "sudo" var is set to "true", add sudo privileges on Arch and Alpine servers
- name: Add sudo privileges - Arch or Alpine
  ansible.builtin.user:
    name: "{{ username }}"
    groups: wheel
  when: (ansible_facts['distribution'] == "Archlinux" or ansible_facts['distribution'] == "Alpine") and sudo | bool

# If the "sudo" var is set to "false", remove sudo privileges on Debian servers
- name: Remove sudo privileges - Debian
  ansible.builtin.shell:
    cmd: gpasswd -d "{{ username }}" sudo
  register: remove_sudo_debian
  failed_when: remove_sudo_debian.rc != 0 and remove_sudo_debian.rc != 3 # return code 3 means the user isn't a member of the specified group
  changed_when: remove_sudo_debian.rc == 0
  when: ansible_facts['distribution'] == "Debian" and not sudo | bool

# If the "sudo" var is set to "false", remove sudo privileges on Arch or Alpine servers
- name: Remove sudo privileges - Arch or Alpine
  ansible.builtin.shell:
    cmd: gpasswd -d "{{ username }}" wheel
  register: remove_sudo_arch_alpine
  failed_when: remove_sudo_arch_alpine.rc != 0 and remove_sudo_arch_alpine.rc != 3 # return code 3 means the user isn't a member of the specified group
  changed_when: remove_sudo_arch_alpine.rc == 0
  when: (ansible_facts['distribution'] == "Archlinux" or ansible_facts['distribution'] == "Alpine") and not sudo | bool

# Create the ".ssh" directory in the user's home folder (if it does not already exists)
- name: Create ".ssh" directory
  ansible.builtin.file:
    path: "/home/{{ username }}/.ssh/"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0700"

# Create the "authorized_keys" file in the user's ssh folder (if it does not already exists)
- name: Create "authorized_keys" file
  ansible.builtin.file:
    path: "/home/{{ username }}/.ssh/authorized_keys"
    state: touch
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0600"

# Set/modify the authorized SSH public key(s) for the user
- name: Set SSH key
  ansible.builtin.shell:
    cmd: echo "{{ pubkey }}" > "/home/{{ username }}/.ssh/authorized_keys"
  register: set_ssh_key
  changed_when: true

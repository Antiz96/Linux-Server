---
# tasks file for update_server

# Update repositories on Debian servers
- name: Update repos - Debian
  ansible.builtin.apt:
    update_cache: true
  when: ansible_facts['distribution'] == "Debian"

# Update repositories on Arch servers
- name: Update repos - Arch
  community.general.pacman:
    update_cache: true
  when: ansible_facts['distribution'] == "Archlinux"

# Check the list of packages to update on Debian servers
- name: Check packages to update - Debian
  ansible.builtin.shell:
    cmd: apt list --upgradable
  register: debian_packages_update
  changed_when: debian_packages_update.rc == 0
  when: ansible_facts['distribution'] == "Debian"

# Check the list of packages to update on Arch servers (requires the "pacman-contrib" package)
- name: Check packages to update - Arch
  ansible.builtin.shell:
    cmd: checkupdates
  ignore_errors: true
  register: arch_packages_update
  changed_when: arch_packages_update.rc == 0
  when: ansible_facts['distribution'] == "Archlinux"

# Print the list of packages to update on Debian servers
- name: List packages to update - Debian
  ansible.builtin.debug:
    msg: "{{ debian_packages_update.stdout_lines }}"
  when: ansible_facts['distribution'] == "Debian" and debian_packages_update.stdout_lines

# Print the list of packages to update on Arch servers
- name: List packages to update - Arch
  ansible.builtin.debug:
    msg: "{{ arch_packages_update.stdout_lines }}"
  when: ansible_facts['distribution'] == "Archlinux" and arch_packages_update.stdout_lines

# Update packages on Debian servers
- name: Update - Debian
  ansible.builtin.apt:
    upgrade: full
    autoremove: true
  when: ansible_facts['distribution'] == "Debian"

# Update packages on Arch servers
- name: Update - Arch
  community.general.pacman:
    upgrade: true
  when: ansible_facts['distribution'] == "Archlinux"

# Check for orphan packages on Arch server
- name: Check orphan packages - Arch
  ansible.builtin.shell:
    cmd: pacman -Qtdq
  ignore_errors: true
  register: arch_orphan_packages
  changed_when: arch_orphan_packages.rc == 0
  when: ansible_facts['distribution'] == "Archlinux"

# Print the list of orphan packages (if there are) on Arch servers
- name: List orphan packages - Arch
  ansible.builtin.debug:
    msg: "{{ arch_orphan_packages.stdout_lines }}"
  when: ansible_facts['distribution'] == "Archlinux" and arch_orphan_packages.stdout_lines

# Delete uninstalled packages from cache on Arch servers
- name: Delete uninstalled packages from cache - Arch
  ansible.builtin.shell:
    cmd: paccache -ruk0
  register: arch_uninstalled_packages_cache
  changed_when: arch_uninstalled_packages_cache.rc == 0
  when: ansible_facts['distribution'] == "Archlinux"

# Print the paccache output on Arch servers
- name: Paccache output - Arch
  ansible.builtin.debug:
    msg: "{{ arch_uninstalled_packages_cache.stdout_lines }}"
  when: ansible_facts['distribution'] == "Archlinux" and arch_uninstalled_packages_cache.stdout_lines

# Check for pacnew files on Arch servers (requires the "pacman-contrib" package)
- name: Check pacnew files - Arch
  ansible.builtin.shell:
    cmd: pacdiff -o
  register: arch_pacnew_files
  changed_when: arch_pacnew_files.rc == 0
  when: ansible_facts['distribution'] == "Archlinux"

# Print the list of pacnew files (if there are) on Arch servers
- name: List pacnew files - Arch
  ansible.builtin.debug:
    msg: "{{ arch_pacnew_files.stdout_lines }}"
  when: ansible_facts['distribution'] == "Archlinux" and arch_pacnew_files.stdout_lines

# Reboot servers (unless it's the Ansible server itself)
- name: Reboot
  ansible.builtin.reboot:
    test_command: whoami
  when: ansible_connection != "local"

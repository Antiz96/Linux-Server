---
# tasks file for bash_command

# Stop the playbook if the "cmd_debian", the "cmd_arch" and the "cmd_alpine" variables are all empty or undefined
- name: Fail if the "cmd_debian", the "cmd_arch" and the "cmd_alpine" variables are all empty or undefined
  ansible.builtin.fail:
    msg: The 'cmd_debian', the 'cmd_arch' and the 'cmd_alpine' variables are all empty
  when: (cmd_debian is undefined or cmd_debian | length == 0) and (cmd_arch is undefined or cmd_arch | length == 0) and (cmd_alpine is undefined or cmd_alpine | length == 0)

# Run the specified bash command on Debian servers
- name: Run bash command - Debian
  ansible.builtin.shell:
    cmd: "{{ cmd_debian }}"
  register: run_cmd_debian
  changed_when: true
  when: ansible_facts['distribution'] == "Debian" and (cmd_debian is defined and cmd_debian | length > 0)

# Run the specified bash command on Arch servers
- name: Run bash command - Arch
  ansible.builtin.shell:
    cmd: "{{ cmd_arch }}"
  register: run_cmd_arch
  changed_when: true
  when: ansible_facts['distribution'] == "Archlinux" and (cmd_arch is defined and cmd_arch | length > 0)

# Run the specified bash command on Alpine servers
- name: Run bash command - Alpine
  ansible.builtin.shell:
    cmd: "{{ cmd_alpine }}"
  register: run_cmd_alpine
  changed_when: true
  when: ansible_facts['distribution'] == "Alpine" and (cmd_alpine is defined and cmd_alpine | length > 0)

# Print the standard output of the command (if there is one) for Debian servers
- name: Bash command standard output - Debian
  ansible.builtin.debug:
    msg: "{{ run_cmd_debian.stdout_lines }}"
  when: ansible_facts['distribution'] == "Debian" and run_cmd_debian.stdout_lines | length > 0

# Print the standard output of the command (if there is one) for Arch servers
- name: Bash command standard output - Arch
  ansible.builtin.debug:
    msg: "{{ run_cmd_arch.stdout_lines }}"
  when: ansible_facts['distribution'] == "Archlinux" and run_cmd_arch.stdout_lines | length > 0

# Print the standard output of the command (if there is one) for Alpine servers
- name: Bash command standard output - Alpine
  ansible.builtin.debug:
    msg: "{{ run_cmd_alpine.stdout_lines }}"
  when: ansible_facts['distribution'] == "Alpine" and run_cmd_alpine.stdout_lines | length > 0

# Print the error output of the command (if there is one) for Debian servers
- name: Bash command error output - Debian
  ansible.builtin.debug:
    msg: "{{ run_cmd_debian.stderr_lines }}"
  when: ansible_facts['distribution'] == "Debian" and run_cmd_debian.stderr_lines | length > 0

# Print the error output of the command (if there is one) for Arch servers
- name: Bash command error output - Arch
  ansible.builtin.debug:
    msg: "{{ run_cmd_arch.stderr_lines }}"
  when: ansible_facts['distribution'] == "Archlinux" and run_cmd_arch.stderr_lines | length > 0

# Print the error output of the command (if there is one) for Alpine servers
- name: Bash command error output - Alpine
  ansible.builtin.debug:
    msg: "{{ run_cmd_alpine.stderr_lines }}"
  when: ansible_facts['distribution'] == "Alpine" and run_cmd_alpine.stderr_lines | length > 0

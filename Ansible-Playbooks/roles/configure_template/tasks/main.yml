---
# tasks file for template

# Stop the playbook if the "ip" var is empty or undefined
- name: Fail if the "ip" variable is empty or undefined
  ansible.builtin.fail:
    msg: The 'ip' variable is empty
  when: ip is undefined or ip | length == 0

# Stop the playbook if the "hostname" var is empty or undefined
- name: Fail if the "hostname" variable is empty or undefined
  ansible.builtin.fail:
    msg: The 'hostname' variable is empty
  when: hostname is undefined or hostname | length == 0

# Stop the playbook if the "root_passwd" var is empty or undefined
- name: Fail if the "root_passwd" variable is empty or undefined
  ansible.builtin.fail:
    msg: The 'root_passwd' variable is empty
  when: root_passwd is undefined or root_passwd | length == 0

# Clean known template.rc SSH hosts (to avoid potential errors)
- name: Clean known template.rc SSH hosts
  ansible.builtin.lineinfile:
    path: /home/ansible/.ssh/known_hosts
    regexp: '^[template.rc]'
    state: absent
  delegate_to: 127.0.0.1

# If the server is a Debian or an Alpine Server, change the IP by modifying the "interfaces" file
- name: Modify IP - Debian or Alpine
  ansible.builtin.replace:
    path: /etc/network/interfaces
    regexp: "192.168.1.100"
    replace: "{{ ip }}"
  when: ansible_facts['distribution'] == "Debian" or ansible_facts['distribution'] == "Alpine"

# If the server is an Arch Server, change the IP by modifying the "nmconnection" file
- name: Modify IP - Arch
  ansible.builtin.replace:
    path: /etc/NetworkManager/system-connections/Connexion filaire 1.nmconnection
    regexp: "192.168.1.100"
    replace: "{{ ip }}"
  when: ansible_facts['distribution'] == "Archlinux"

# Change the hostname of the server
- name: Modify hostname
  ansible.builtin.hostname:
    name: "{{ hostname }}.rc"

# Change the "hosts" file of the server accordingly
- name: Modify "hosts" file
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: "^127.0.1.1"
    line: "127.0.1.1       {{ hostname }}.rc {{ hostname }}"

# Change the root password
- name: Modify root password
  ansible.builtin.user:
    name: root
    password: "{{ root_passwd | password_hash('sha256') }}"
    update_password: always

# Configure the Zabbix Agent configuration file with the hostname of the server
- name: Modify Zabbix Agent configuration
  ansible.builtin.replace:
    path: /etc/zabbix/zabbix_agentd.conf
    regexp: "template.rc"
    replace: "{{ hostname }}.rc"

# If the server is a Debian Server, update it via "apt" (apt update && apt full-upgrade && apt autoremove)
- name: Update - Debian
  ansible.builtin.apt:
    update_cache: true
    upgrade: full
    autoremove: true
  when: ansible_facts['distribution'] == "Debian"

# If the server is an Arch Server, update it via "pacman" (pacman -Sy && pacman -Su)
- name: Update - Arch
  community.general.pacman:
    update_cache: true
    upgrade: true
  when: ansible_facts['distribution'] == "Archlinux"

# If the server is an Alpine Server, update it via "apk" (apk update && apk upgrade -a)
- name: Update - Alpine
  community.general.apk:
    update_cache: true
    available: true
    upgrade: true
  when: ansible_facts['distribution'] == "Alpine"

# Tell the user the configuration is over and that he needs to reboot the machine to finish
- name: Configuration done
  ansible.builtin.debug:
    msg:
      - "The configuration is over!"
      - "Reboot the server to apply changes for {{ hostname }} ({{ ip }})"

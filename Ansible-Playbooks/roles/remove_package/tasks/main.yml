---
# tasks file for add_package

# Stop the playbook if the "package_debian", the "package_arch" or the "package_alpine" variables are all empty or undefined
- name: Fail if the "package_debian" and the "package_arch" variables are empty or undefined
  ansible.builtin.fail:
    msg: The 'package_debian', the 'package_arch' and the 'package_alpine' variables are all empty
  when: (package_debian is undefined or package_debian | length == 0) and (package_arch is undefined or package_arch | length == 0) and (package_alpine is undefined or package_alpine | length == 0)

# Remove package(s) on Debian servers
- name: Remove package(s) - Debian
  ansible.builtin.apt:
    name: "{{ package_debian }}"
    state: absent
    autoremove: true
  when: ansible_facts['distribution'] == "Debian" and (package_debian is defined and package_debian | length > 0)

# Remove package(s) on Arch servers
- name: Remove package(s) - Arch
  community.general.pacman:
    name: "{{ package_arch }}"
    state: absent
    extra_args: --recursive
  when: ansible_facts['distribution'] == "Archlinux" and (package_arch is defined and package_arch | length > 0)

# Remove package(s) on Alpine servers
- name: Remove package(s) - Alpine
  community.general.apk:
    name: "{{ package_alpine }}"
    state: absent
  when: ansible_facts['distribution'] == "Alpine" and (package_alpine is defined and package_alpine | length > 0)
